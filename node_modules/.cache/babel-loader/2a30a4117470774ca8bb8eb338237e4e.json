{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\auth-final\\\\src\\\\Components\\\\Login.js\";\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, provider, fprovider } from \"../firebase\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, FacebookAuthProvider } from \"firebase/auth\";\nimport { login } from '../features/userSlice';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  const signinGoogle = () => {\n    signInWithPopup(auth, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken; // The signed-in user info.\n\n      const user = result.user;\n      localStorage.setItem(\"user\", JSON.stringify({\n        name: user.displayName,\n        email: user.email,\n        uid: user.uid\n      }));\n      dispatch(login(localStorage.getItem(\"user\")));\n      navigate(\"/profile\"); // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.customData.email; // The AuthCredential type that was used.\n\n      const credential = GoogleAuthProvider.credentialFromError(error); // ...\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          \"marginTop\": \"200px\"\n        },\n        onClick: signinGoogle,\n        children: \"Sign In with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","auth","provider","fprovider","getAuth","signInWithPopup","GoogleAuthProvider","FacebookAuthProvider","login","useDispatch","Login","signinGoogle","then","result","credential","credentialFromResult","token","accessToken","user","localStorage","setItem","JSON","stringify","name","displayName","email","uid","dispatch","getItem","navigate","catch","error","errorCode","code","errorMessage","message","customData","credentialFromError"],"sources":["C:/Users/anish/auth-final/src/Components/Login.js"],"sourcesContent":["import React,{useState} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport {auth,provider,fprovider} from \"../firebase\"\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider ,FacebookAuthProvider} from \"firebase/auth\";\r\nimport { login } from '../features/userSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n\r\n  \r\nconst Login = () => {\r\n  \r\n const signinGoogle=()=>{\r\n    signInWithPopup(auth, provider)\r\n            .then((result) => {\r\n                // This gives you a Google Access Token. You can use it to access the Google API.\r\n                const credential = GoogleAuthProvider.credentialFromResult(result);\r\n                const token = credential.accessToken;\r\n                // The signed-in user info.\r\n                const user = result.user;\r\n                localStorage.setItem(\"user\", JSON.stringify({name:user.displayName,\r\n                email:user.email,\r\n                uid:user.uid}))\r\n                dispatch(login(localStorage.getItem(\"user\")));\r\n\r\n                navigate(\"/profile\")\r\n\r\n               \r\n                // ...\r\n            }).catch((error) => {\r\n                // Handle Errors here.\r\n                const errorCode = error.code;\r\n                const errorMessage = error.message;\r\n                // The email of the user's account used.\r\n                const email = error.customData.email;\r\n                // The AuthCredential type that was used.\r\n                const credential = GoogleAuthProvider.credentialFromError(error);\r\n                // ...\r\n            });\r\n }\r\n    \r\n\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n      \r\n    return (\r\n        <div>\r\n    \r\n                <center>\r\n                <button style={{\"marginTop\" : \"200px\"}} onClick={signinGoogle}>Sign In with Google</button>\r\n                </center>\r\n                \r\n            \r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default Login;"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,SAAQC,IAAR,EAAaC,QAAb,EAAsBC,SAAtB,QAAsC,aAAtC;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,EAAuDC,oBAAvD,QAAkF,eAAlF;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAIA,MAAMC,KAAK,GAAG,MAAM;EAEnB,MAAMC,YAAY,GAAC,MAAI;IACpBN,eAAe,CAACJ,IAAD,EAAOC,QAAP,CAAf,CACSU,IADT,CACeC,MAAD,IAAY;MACd;MACA,MAAMC,UAAU,GAAGR,kBAAkB,CAACS,oBAAnB,CAAwCF,MAAxC,CAAnB;MACA,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHc,CAId;;MACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB;MACAC,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAe;QAACC,IAAI,EAACL,IAAI,CAACM,WAAX;QAC5CC,KAAK,EAACP,IAAI,CAACO,KADiC;QAE5CC,GAAG,EAACR,IAAI,CAACQ;MAFmC,CAAf,CAA7B;MAGAC,QAAQ,CAACnB,KAAK,CAACW,YAAY,CAACS,OAAb,CAAqB,MAArB,CAAD,CAAN,CAAR;MAEAC,QAAQ,CAAC,UAAD,CAAR,CAXc,CAcd;IACH,CAhBT,EAgBWC,KAhBX,CAgBkBC,KAAD,IAAW;MAChB;MACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;MACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;MACA,MAAMV,KAAK,GAAGM,KAAK,CAACK,UAAN,CAAiBX,KAA/B,CALgB,CAMhB;;MACA,MAAMX,UAAU,GAAGR,kBAAkB,CAAC+B,mBAAnB,CAAuCN,KAAvC,CAAnB,CAPgB,CAQhB;IACH,CAzBT;EA0BF,CA3BD;;EAsCG,oBACI;IAAA,uBAEQ;MAAA,uBACA;QAAQ,KAAK,EAAE;UAAC,aAAc;QAAf,CAAf;QAAwC,OAAO,EAAEpB,YAAjD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADA;MAAA;MAAA;MAAA;IAAA;EAFR;IAAA;IAAA;IAAA;EAAA,QADJ;AAUH,CAlDD;;KAAMD,K;AAoDN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}