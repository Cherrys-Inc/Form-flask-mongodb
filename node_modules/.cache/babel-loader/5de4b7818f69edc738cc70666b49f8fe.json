{"ast":null,"code":"var previousOverflow = [];\nvar previousPaddingRight = [];\n/**\n * Toggle the body scroll / overflow and additional styling\n * necessary to preserve scroll position and body width (scrollbar replacement)\n *\n * @param {boolean} preventScroll - whether or not to prevent body scrolling\n */\n\nexport default function preventBodyScroll(preventScroll) {\n  /** Get the width before toggling the style so we can calculate the scrollbar width for a smooth, jankless style change */\n  var _document$body$getBou = document.body.getBoundingClientRect(),\n      width = _document$body$getBou.width;\n  /** Apply or remove overflow style */\n\n\n  if (preventScroll) {\n    previousOverflow.push(document.body.style.overflow);\n    document.body.style.overflow = 'hidden';\n  } else {\n    document.body.style.overflow = previousOverflow.pop() || '';\n  }\n  /** Get the _new width_ of the body (this will tell us the scrollbar width) */\n\n\n  var newWidth = document.body.getBoundingClientRect().width;\n  var scrollBarWidth = newWidth - width;\n  /** If there's a diff due to scrollbars, then account for it with padding */\n\n  if (preventScroll) {\n    previousPaddingRight.push(document.body.style.paddingRight);\n    document.body.style.paddingRight = Math.max(0, scrollBarWidth || 0) + 'px';\n  } else {\n    document.body.style.paddingRight = previousPaddingRight.pop() || '';\n  }\n}","map":{"version":3,"names":["previousOverflow","previousPaddingRight","preventBodyScroll","preventScroll","_document$body$getBou","document","body","getBoundingClientRect","width","push","style","overflow","pop","newWidth","scrollBarWidth","paddingRight","Math","max"],"sources":["C:/Users/anish/auth-final/node_modules/evergreen-ui/esm/lib/prevent-body-scroll.js"],"sourcesContent":["var previousOverflow = [];\nvar previousPaddingRight = [];\n/**\n * Toggle the body scroll / overflow and additional styling\n * necessary to preserve scroll position and body width (scrollbar replacement)\n *\n * @param {boolean} preventScroll - whether or not to prevent body scrolling\n */\n\nexport default function preventBodyScroll(preventScroll) {\n  /** Get the width before toggling the style so we can calculate the scrollbar width for a smooth, jankless style change */\n  var _document$body$getBou = document.body.getBoundingClientRect(),\n      width = _document$body$getBou.width;\n  /** Apply or remove overflow style */\n\n\n  if (preventScroll) {\n    previousOverflow.push(document.body.style.overflow);\n    document.body.style.overflow = 'hidden';\n  } else {\n    document.body.style.overflow = previousOverflow.pop() || '';\n  }\n  /** Get the _new width_ of the body (this will tell us the scrollbar width) */\n\n\n  var newWidth = document.body.getBoundingClientRect().width;\n  var scrollBarWidth = newWidth - width;\n  /** If there's a diff due to scrollbars, then account for it with padding */\n\n  if (preventScroll) {\n    previousPaddingRight.push(document.body.style.paddingRight);\n    document.body.style.paddingRight = Math.max(0, scrollBarWidth || 0) + 'px';\n  } else {\n    document.body.style.paddingRight = previousPaddingRight.pop() || '';\n  }\n}"],"mappings":"AAAA,IAAIA,gBAAgB,GAAG,EAAvB;AACA,IAAIC,oBAAoB,GAAG,EAA3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,iBAAT,CAA2BC,aAA3B,EAA0C;EACvD;EACA,IAAIC,qBAAqB,GAAGC,QAAQ,CAACC,IAAT,CAAcC,qBAAd,EAA5B;EAAA,IACIC,KAAK,GAAGJ,qBAAqB,CAACI,KADlC;EAEA;;;EAGA,IAAIL,aAAJ,EAAmB;IACjBH,gBAAgB,CAACS,IAAjB,CAAsBJ,QAAQ,CAACC,IAAT,CAAcI,KAAd,CAAoBC,QAA1C;IACAN,QAAQ,CAACC,IAAT,CAAcI,KAAd,CAAoBC,QAApB,GAA+B,QAA/B;EACD,CAHD,MAGO;IACLN,QAAQ,CAACC,IAAT,CAAcI,KAAd,CAAoBC,QAApB,GAA+BX,gBAAgB,CAACY,GAAjB,MAA0B,EAAzD;EACD;EACD;;;EAGA,IAAIC,QAAQ,GAAGR,QAAQ,CAACC,IAAT,CAAcC,qBAAd,GAAsCC,KAArD;EACA,IAAIM,cAAc,GAAGD,QAAQ,GAAGL,KAAhC;EACA;;EAEA,IAAIL,aAAJ,EAAmB;IACjBF,oBAAoB,CAACQ,IAArB,CAA0BJ,QAAQ,CAACC,IAAT,CAAcI,KAAd,CAAoBK,YAA9C;IACAV,QAAQ,CAACC,IAAT,CAAcI,KAAd,CAAoBK,YAApB,GAAmCC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,cAAc,IAAI,CAA9B,IAAmC,IAAtE;EACD,CAHD,MAGO;IACLT,QAAQ,CAACC,IAAT,CAAcI,KAAd,CAAoBK,YAApB,GAAmCd,oBAAoB,CAACW,GAArB,MAA8B,EAAjE;EACD;AACF"},"metadata":{},"sourceType":"module"}