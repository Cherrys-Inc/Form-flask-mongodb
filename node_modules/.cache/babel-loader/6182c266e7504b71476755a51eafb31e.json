{"ast":null,"code":"/* humanize.js - v1.8.2 */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright 2013-2016 HubSpotDev\n * MIT Licensed\n *\n * @module humanize.js\n */\n\n\n(function (root, factory) {\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return root.Humanize = factory();\n    });\n  } else {\n    root.Humanize = factory();\n  }\n})(this, function () {\n  //------------------------------------------------------------------------------\n  // Constants\n  //------------------------------------------------------------------------------\n  var TIME_FORMATS = [{\n    name: 'second',\n    value: 1e3\n  }, {\n    name: 'minute',\n    value: 6e4\n  }, {\n    name: 'hour',\n    value: 36e5\n  }, {\n    name: 'day',\n    value: 864e5\n  }, {\n    name: 'week',\n    value: 6048e5\n  }];\n  var LABELS_FOR_POWERS_OF_KILO = {\n    P: Math.pow(2, 50),\n    T: Math.pow(2, 40),\n    G: Math.pow(2, 30),\n    M: Math.pow(2, 20)\n  }; //------------------------------------------------------------------------------\n  // Helpers\n  //------------------------------------------------------------------------------\n\n  var exists = function exists(maybe) {\n    return typeof maybe !== 'undefined' && maybe !== null;\n  };\n\n  var isNaN = function isNaN(value) {\n    return value !== value;\n  }; // eslint-disable-line\n\n\n  var isFiniteNumber = function isFiniteNumber(value) {\n    return isFinite(value) && !isNaN(parseFloat(value));\n  };\n\n  var isArray = function isArray(value) {\n    var type = Object.prototype.toString.call(value);\n    return type === '[object Array]';\n  }; //------------------------------------------------------------------------------\n  // Humanize\n  //------------------------------------------------------------------------------\n\n\n  var Humanize = {\n    // Converts a large integer to a friendly text representation.\n    intword: function intword(number, charWidth) {\n      var decimals = arguments.length <= 2 || arguments[2] === undefined ? 2 : arguments[2];\n      /*\n      * This method is deprecated. Please use compactInteger instead.\n      * intword will be going away in the next major version.\n      */\n\n      return Humanize.compactInteger(number, decimals);\n    },\n    // Converts an integer into its most compact representation\n    compactInteger: function compactInteger(input) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      decimals = Math.max(decimals, 0);\n      var number = parseInt(input, 10);\n      var signString = number < 0 ? '-' : '';\n      var unsignedNumber = Math.abs(number);\n      var unsignedNumberString = String(unsignedNumber);\n      var numberLength = unsignedNumberString.length;\n      var numberLengths = [13, 10, 7, 4];\n      var bigNumPrefixes = ['T', 'B', 'M', 'k']; // small numbers\n\n      if (unsignedNumber < 1000) {\n        return '' + signString + unsignedNumberString;\n      } // really big numbers\n\n\n      if (numberLength > numberLengths[0] + 3) {\n        return number.toExponential(decimals).replace('e+', 'x10^');\n      } // 999 < unsignedNumber < 999,999,999,999,999\n\n\n      var length = void 0;\n\n      for (var i = 0; i < numberLengths.length; i++) {\n        var _length = numberLengths[i];\n\n        if (numberLength >= _length) {\n          length = _length;\n          break;\n        }\n      }\n\n      var decimalIndex = numberLength - length + 1;\n      var unsignedNumberCharacterArray = unsignedNumberString.split('');\n      var wholePartArray = unsignedNumberCharacterArray.slice(0, decimalIndex);\n      var decimalPartArray = unsignedNumberCharacterArray.slice(decimalIndex, decimalIndex + decimals + 1);\n      var wholePart = wholePartArray.join(''); // pad decimalPart if necessary\n\n      var decimalPart = decimalPartArray.join('');\n\n      if (decimalPart.length < decimals) {\n        decimalPart += '' + Array(decimals - decimalPart.length + 1).join('0');\n      }\n\n      var output = void 0;\n\n      if (decimals === 0) {\n        output = '' + signString + wholePart + bigNumPrefixes[numberLengths.indexOf(length)];\n      } else {\n        var outputNumber = Number(wholePart + '.' + decimalPart).toFixed(decimals);\n        output = '' + signString + outputNumber + bigNumPrefixes[numberLengths.indexOf(length)];\n      }\n\n      return output;\n    },\n    // Converts an integer to a string containing commas every three digits.\n    intComma: function intComma(number) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      return Humanize.formatNumber(number, decimals);\n    },\n    intcomma: function intcomma() {\n      return Humanize.intComma.apply(Humanize, arguments);\n    },\n    // Formats the value like a 'human-readable' file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc).\n    fileSize: function fileSize(filesize) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];\n\n      for (var label in LABELS_FOR_POWERS_OF_KILO) {\n        if (LABELS_FOR_POWERS_OF_KILO.hasOwnProperty(label)) {\n          var minnum = LABELS_FOR_POWERS_OF_KILO[label];\n\n          if (filesize >= minnum) {\n            return Humanize.formatNumber(filesize / minnum, precision, '') + ' ' + label + 'B';\n          }\n        }\n      }\n\n      if (filesize >= 1024) {\n        return Humanize.formatNumber(filesize / 1024, 0) + ' KB';\n      }\n\n      return Humanize.formatNumber(filesize, 0) + Humanize.pluralize(filesize, ' byte');\n    },\n    filesize: function filesize() {\n      return Humanize.fileSize.apply(Humanize, arguments);\n    },\n    // Formats a number to a human-readable string.\n    // Localize by overriding the precision, thousand and decimal arguments.\n    formatNumber: function formatNumber(number) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var thousand = arguments.length <= 2 || arguments[2] === undefined ? ',' : arguments[2];\n      var decimal = arguments.length <= 3 || arguments[3] === undefined ? '.' : arguments[3]; // Create some private utility functions to make the computational\n      // code that follows much easier to read.\n\n      var firstComma = function firstComma(_number, _thousand, _position) {\n        return _position ? _number.substr(0, _position) + _thousand : '';\n      };\n\n      var commas = function commas(_number, _thousand, _position) {\n        return _number.substr(_position).replace(/(\\d{3})(?=\\d)/g, '$1' + _thousand);\n      };\n\n      var decimals = function decimals(_number, _decimal, usePrecision) {\n        return usePrecision ? _decimal + Humanize.toFixed(Math.abs(_number), usePrecision).split('.')[1] : '';\n      };\n\n      var usePrecision = Humanize.normalizePrecision(precision); // Do some calc\n\n      var negative = number < 0 && '-' || '';\n      var base = String(parseInt(Humanize.toFixed(Math.abs(number || 0), usePrecision), 10));\n      var mod = base.length > 3 ? base.length % 3 : 0; // Format the number\n\n      return negative + firstComma(base, thousand, mod) + commas(base, thousand, mod) + decimals(number, decimal, usePrecision);\n    },\n    // Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61')\n    toFixed: function toFixed(value, precision) {\n      precision = exists(precision) ? precision : Humanize.normalizePrecision(precision, 0);\n      var power = Math.pow(10, precision); // Multiply up by precision, round accurately, then divide and use native toFixed()\n\n      return (Math.round(value * power) / power).toFixed(precision);\n    },\n    // Ensures precision value is a positive integer\n    normalizePrecision: function normalizePrecision(value, base) {\n      value = Math.round(Math.abs(value));\n      return isNaN(value) ? base : value;\n    },\n    // Converts an integer to its ordinal as a string.\n    ordinal: function ordinal(value) {\n      var number = parseInt(value, 10);\n\n      if (number === 0) {\n        return value;\n      }\n\n      var specialCase = number % 100;\n\n      if ([11, 12, 13].indexOf(specialCase) >= 0) {\n        return number + 'th';\n      }\n\n      var leastSignificant = number % 10;\n      var end = void 0;\n\n      switch (leastSignificant) {\n        case 1:\n          end = 'st';\n          break;\n\n        case 2:\n          end = 'nd';\n          break;\n\n        case 3:\n          end = 'rd';\n          break;\n\n        default:\n          end = 'th';\n      }\n\n      return '' + number + end;\n    },\n    // Interprets numbers as occurences. Also accepts an optional array/map of overrides.\n    times: function times(value) {\n      var overrides = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (isFiniteNumber(value) && value >= 0) {\n        var number = parseFloat(value);\n        var smallTimes = ['never', 'once', 'twice'];\n\n        if (exists(overrides[number])) {\n          return String(overrides[number]);\n        }\n\n        var numberString = exists(smallTimes[number]) && smallTimes[number].toString();\n        return numberString || number.toString() + ' times';\n      }\n\n      return null;\n    },\n    // Returns the plural version of a given word if the value is not 1. The default suffix is 's'.\n    pluralize: function pluralize(number, singular, plural) {\n      if (!(exists(number) && exists(singular))) {\n        return null;\n      }\n\n      plural = exists(plural) ? plural : singular + 's';\n      return parseInt(number, 10) === 1 ? singular : plural;\n    },\n    // Truncates a string if it is longer than the specified number of characters (inclusive).\n    // Truncated strings will end with a translatable ellipsis sequence (\"…\").\n    truncate: function truncate(str) {\n      var length = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '...' : arguments[2];\n\n      if (str.length > length) {\n        return str.substring(0, length - ending.length) + ending;\n      }\n\n      return str;\n    },\n    // Truncates a string after a certain number of words.\n    truncateWords: function truncateWords(string, length) {\n      var array = string.split(' ');\n      var result = '';\n      var i = 0;\n\n      while (i < length) {\n        if (exists(array[i])) {\n          result += array[i] + ' ';\n        }\n\n        i++;\n      }\n\n      if (array.length > length) {\n        return result + '...';\n      }\n\n      return null;\n    },\n    truncatewords: function truncatewords() {\n      return Humanize.truncateWords.apply(Humanize, arguments);\n    },\n    // Truncates a number to an upper bound.\n    boundedNumber: function boundedNumber(num) {\n      var bound = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '+' : arguments[2];\n      var result = void 0;\n\n      if (isFiniteNumber(num) && isFiniteNumber(bound)) {\n        if (num > bound) {\n          result = bound + ending;\n        }\n      }\n\n      return (result || num).toString();\n    },\n    truncatenumber: function truncatenumber() {\n      return Humanize.boundedNumber.apply(Humanize, arguments);\n    },\n    // Converts a list of items to a human readable string with an optional limit.\n    oxford: function oxford(items, limit, limitStr) {\n      var numItems = items.length;\n      var limitIndex = void 0;\n\n      if (numItems < 2) {\n        return String(items);\n      } else if (numItems === 2) {\n        return items.join(' and ');\n      } else if (exists(limit) && numItems > limit) {\n        var extra = numItems - limit;\n        limitIndex = limit;\n        limitStr = exists(limitStr) ? limitStr : ', and ' + extra + ' ' + Humanize.pluralize(extra, 'other');\n      } else {\n        limitIndex = -1;\n        limitStr = ', and ' + items[numItems - 1];\n      }\n\n      return items.slice(0, limitIndex).join(', ') + limitStr;\n    },\n    // Converts an object to a definition-like string\n    dictionary: function dictionary(object) {\n      var joiner = arguments.length <= 1 || arguments[1] === undefined ? ' is ' : arguments[1];\n      var separator = arguments.length <= 2 || arguments[2] === undefined ? ', ' : arguments[2];\n      var result = '';\n\n      if (exists(object) && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && !isArray(object)) {\n        var defs = [];\n\n        for (var key in object) {\n          if (object.hasOwnProperty(key)) {\n            var val = object[key];\n            defs.push('' + key + joiner + val);\n          }\n        }\n\n        return defs.join(separator);\n      }\n\n      return result;\n    },\n    // Describes how many times an item appears in a list\n    frequency: function frequency(list, verb) {\n      if (!isArray(list)) {\n        return null;\n      }\n\n      var len = list.length;\n      var times = Humanize.times(len);\n\n      if (len === 0) {\n        return times + ' ' + verb;\n      }\n\n      return verb + ' ' + times;\n    },\n    pace: function pace(value, intervalMs) {\n      var unit = arguments.length <= 2 || arguments[2] === undefined ? 'time' : arguments[2];\n\n      if (value === 0 || intervalMs === 0) {\n        // Needs a better string than this...\n        return 'No ' + Humanize.pluralize(0, unit);\n      } // Expose these as overridables?\n\n\n      var prefix = 'Approximately';\n      var timeUnit = void 0;\n      var relativePace = void 0;\n      var rate = value / intervalMs;\n\n      for (var i = 0; i < TIME_FORMATS.length; ++i) {\n        // assumes sorted list\n        var f = TIME_FORMATS[i];\n        relativePace = rate * f.value;\n\n        if (relativePace > 1) {\n          timeUnit = f.name;\n          break;\n        }\n      } // Use the last time unit if there is nothing smaller\n\n\n      if (!timeUnit) {\n        prefix = 'Less than';\n        relativePace = 1;\n        timeUnit = TIME_FORMATS[TIME_FORMATS.length - 1].name;\n      }\n\n      var roundedPace = Math.round(relativePace);\n      unit = Humanize.pluralize(roundedPace, unit);\n      return prefix + ' ' + roundedPace + ' ' + unit + ' per ' + timeUnit;\n    },\n    // Converts newlines to <br/> tags\n    nl2br: function nl2br(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '<br/>' : arguments[1];\n      return string.replace(/\\n/g, replacement);\n    },\n    // Converts <br/> tags to newlines\n    br2nl: function br2nl(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '\\r\\n' : arguments[1];\n      return string.replace(/\\<br\\s*\\/?\\>/g, replacement);\n    },\n    // Capitalizes first letter in a string\n    capitalize: function capitalize(string) {\n      var downCaseTail = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n      return '' + string.charAt(0).toUpperCase() + (downCaseTail ? string.slice(1).toLowerCase() : string.slice(1));\n    },\n    // Capitalizes the first letter of each word in a string\n    capitalizeAll: function capitalizeAll(string) {\n      return string.replace(/(?:^|\\s)\\S/g, function (a) {\n        return a.toUpperCase();\n      });\n    },\n    // Titlecase words in a string.\n    titleCase: function titleCase(string) {\n      var smallWords = /\\b(a|an|and|at|but|by|de|en|for|if|in|of|on|or|the|to|via|vs?\\.?)\\b/i;\n      var internalCaps = /\\S+[A-Z]+\\S*/;\n      var splitOnWhiteSpaceRegex = /\\s+/;\n      var splitOnHyphensRegex = /-/;\n\n      var _doTitleCase = void 0;\n\n      _doTitleCase = function doTitleCase(_string) {\n        var hyphenated = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n        var firstOrLast = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n        var titleCasedArray = [];\n\n        var stringArray = _string.split(hyphenated ? splitOnHyphensRegex : splitOnWhiteSpaceRegex);\n\n        for (var index = 0; index < stringArray.length; ++index) {\n          var word = stringArray[index];\n\n          if (word.indexOf('-') !== -1) {\n            titleCasedArray.push(_doTitleCase(word, true, index === 0 || index === stringArray.length - 1));\n            continue;\n          }\n\n          if (firstOrLast && (index === 0 || index === stringArray.length - 1)) {\n            titleCasedArray.push(internalCaps.test(word) ? word : Humanize.capitalize(word));\n            continue;\n          }\n\n          if (internalCaps.test(word)) {\n            titleCasedArray.push(word);\n          } else if (smallWords.test(word)) {\n            titleCasedArray.push(word.toLowerCase());\n          } else {\n            titleCasedArray.push(Humanize.capitalize(word));\n          }\n        }\n\n        return titleCasedArray.join(hyphenated ? '-' : ' ');\n      };\n\n      return _doTitleCase(string);\n    },\n    titlecase: function titlecase() {\n      return Humanize.titleCase.apply(Humanize, arguments);\n    }\n  };\n  return Humanize;\n});","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","root","factory","exports","module","define","amd","Humanize","TIME_FORMATS","name","value","LABELS_FOR_POWERS_OF_KILO","P","Math","pow","T","G","M","exists","maybe","isNaN","isFiniteNumber","isFinite","parseFloat","isArray","type","Object","prototype","toString","call","intword","number","charWidth","decimals","arguments","length","undefined","compactInteger","input","max","parseInt","signString","unsignedNumber","abs","unsignedNumberString","String","numberLength","numberLengths","bigNumPrefixes","toExponential","replace","i","_length","decimalIndex","unsignedNumberCharacterArray","split","wholePartArray","slice","decimalPartArray","wholePart","join","decimalPart","Array","output","indexOf","outputNumber","Number","toFixed","intComma","formatNumber","intcomma","apply","fileSize","filesize","precision","label","hasOwnProperty","minnum","pluralize","thousand","decimal","firstComma","_number","_thousand","_position","substr","commas","_decimal","usePrecision","normalizePrecision","negative","base","mod","power","round","ordinal","specialCase","leastSignificant","end","times","overrides","smallTimes","numberString","singular","plural","truncate","str","ending","substring","truncateWords","string","array","result","truncatewords","boundedNumber","num","bound","truncatenumber","oxford","items","limit","limitStr","numItems","limitIndex","extra","dictionary","object","joiner","separator","defs","key","val","push","frequency","list","verb","len","pace","intervalMs","unit","prefix","timeUnit","relativePace","rate","f","roundedPace","nl2br","replacement","br2nl","capitalize","downCaseTail","charAt","toUpperCase","toLowerCase","capitalizeAll","a","titleCase","smallWords","internalCaps","splitOnWhiteSpaceRegex","splitOnHyphensRegex","_doTitleCase","doTitleCase","_string","hyphenated","firstOrLast","titleCasedArray","stringArray","index","word","test","titlecase"],"sources":["C:/Users/anish/auth-final/node_modules/humanize-plus/dist/humanize.js"],"sourcesContent":["/* humanize.js - v1.8.2 */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/**\n * Copyright 2013-2016 HubSpotDev\n * MIT Licensed\n *\n * @module humanize.js\n */\n\n(function (root, factory) {\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return root.Humanize = factory();\n    });\n  } else {\n    root.Humanize = factory();\n  }\n})(this, function () {\n  //------------------------------------------------------------------------------\n  // Constants\n  //------------------------------------------------------------------------------\n\n  var TIME_FORMATS = [{\n    name: 'second',\n    value: 1e3\n  }, {\n    name: 'minute',\n    value: 6e4\n  }, {\n    name: 'hour',\n    value: 36e5\n  }, {\n    name: 'day',\n    value: 864e5\n  }, {\n    name: 'week',\n    value: 6048e5\n  }];\n\n  var LABELS_FOR_POWERS_OF_KILO = {\n    P: Math.pow(2, 50),\n    T: Math.pow(2, 40),\n    G: Math.pow(2, 30),\n    M: Math.pow(2, 20)\n  };\n\n  //------------------------------------------------------------------------------\n  // Helpers\n  //------------------------------------------------------------------------------\n\n  var exists = function exists(maybe) {\n    return typeof maybe !== 'undefined' && maybe !== null;\n  };\n\n  var isNaN = function isNaN(value) {\n    return value !== value;\n  }; // eslint-disable-line\n\n  var isFiniteNumber = function isFiniteNumber(value) {\n    return isFinite(value) && !isNaN(parseFloat(value));\n  };\n\n  var isArray = function isArray(value) {\n    var type = Object.prototype.toString.call(value);\n    return type === '[object Array]';\n  };\n\n  //------------------------------------------------------------------------------\n  // Humanize\n  //------------------------------------------------------------------------------\n\n  var Humanize = {\n\n    // Converts a large integer to a friendly text representation.\n\n    intword: function intword(number, charWidth) {\n      var decimals = arguments.length <= 2 || arguments[2] === undefined ? 2 : arguments[2];\n\n      /*\n      * This method is deprecated. Please use compactInteger instead.\n      * intword will be going away in the next major version.\n      */\n      return Humanize.compactInteger(number, decimals);\n    },\n\n\n    // Converts an integer into its most compact representation\n    compactInteger: function compactInteger(input) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      decimals = Math.max(decimals, 0);\n      var number = parseInt(input, 10);\n      var signString = number < 0 ? '-' : '';\n      var unsignedNumber = Math.abs(number);\n      var unsignedNumberString = String(unsignedNumber);\n      var numberLength = unsignedNumberString.length;\n      var numberLengths = [13, 10, 7, 4];\n      var bigNumPrefixes = ['T', 'B', 'M', 'k'];\n\n      // small numbers\n      if (unsignedNumber < 1000) {\n        return '' + signString + unsignedNumberString;\n      }\n\n      // really big numbers\n      if (numberLength > numberLengths[0] + 3) {\n        return number.toExponential(decimals).replace('e+', 'x10^');\n      }\n\n      // 999 < unsignedNumber < 999,999,999,999,999\n      var length = void 0;\n      for (var i = 0; i < numberLengths.length; i++) {\n        var _length = numberLengths[i];\n        if (numberLength >= _length) {\n          length = _length;\n          break;\n        }\n      }\n\n      var decimalIndex = numberLength - length + 1;\n      var unsignedNumberCharacterArray = unsignedNumberString.split('');\n\n      var wholePartArray = unsignedNumberCharacterArray.slice(0, decimalIndex);\n      var decimalPartArray = unsignedNumberCharacterArray.slice(decimalIndex, decimalIndex + decimals + 1);\n\n      var wholePart = wholePartArray.join('');\n\n      // pad decimalPart if necessary\n      var decimalPart = decimalPartArray.join('');\n      if (decimalPart.length < decimals) {\n        decimalPart += '' + Array(decimals - decimalPart.length + 1).join('0');\n      }\n\n      var output = void 0;\n      if (decimals === 0) {\n        output = '' + signString + wholePart + bigNumPrefixes[numberLengths.indexOf(length)];\n      } else {\n        var outputNumber = Number(wholePart + '.' + decimalPart).toFixed(decimals);\n        output = '' + signString + outputNumber + bigNumPrefixes[numberLengths.indexOf(length)];\n      }\n\n      return output;\n    },\n\n\n    // Converts an integer to a string containing commas every three digits.\n    intComma: function intComma(number) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      return Humanize.formatNumber(number, decimals);\n    },\n    intcomma: function intcomma() {\n      return Humanize.intComma.apply(Humanize, arguments);\n    },\n\n\n    // Formats the value like a 'human-readable' file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc).\n    fileSize: function fileSize(filesize) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];\n\n      for (var label in LABELS_FOR_POWERS_OF_KILO) {\n        if (LABELS_FOR_POWERS_OF_KILO.hasOwnProperty(label)) {\n          var minnum = LABELS_FOR_POWERS_OF_KILO[label];\n          if (filesize >= minnum) {\n            return Humanize.formatNumber(filesize / minnum, precision, '') + ' ' + label + 'B';\n          }\n        }\n      }\n      if (filesize >= 1024) {\n        return Humanize.formatNumber(filesize / 1024, 0) + ' KB';\n      }\n\n      return Humanize.formatNumber(filesize, 0) + Humanize.pluralize(filesize, ' byte');\n    },\n    filesize: function filesize() {\n      return Humanize.fileSize.apply(Humanize, arguments);\n    },\n\n\n    // Formats a number to a human-readable string.\n    // Localize by overriding the precision, thousand and decimal arguments.\n    formatNumber: function formatNumber(number) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var thousand = arguments.length <= 2 || arguments[2] === undefined ? ',' : arguments[2];\n      var decimal = arguments.length <= 3 || arguments[3] === undefined ? '.' : arguments[3];\n\n      // Create some private utility functions to make the computational\n      // code that follows much easier to read.\n      var firstComma = function firstComma(_number, _thousand, _position) {\n        return _position ? _number.substr(0, _position) + _thousand : '';\n      };\n\n      var commas = function commas(_number, _thousand, _position) {\n        return _number.substr(_position).replace(/(\\d{3})(?=\\d)/g, '$1' + _thousand);\n      };\n\n      var decimals = function decimals(_number, _decimal, usePrecision) {\n        return usePrecision ? _decimal + Humanize.toFixed(Math.abs(_number), usePrecision).split('.')[1] : '';\n      };\n\n      var usePrecision = Humanize.normalizePrecision(precision);\n\n      // Do some calc\n      var negative = number < 0 && '-' || '';\n      var base = String(parseInt(Humanize.toFixed(Math.abs(number || 0), usePrecision), 10));\n      var mod = base.length > 3 ? base.length % 3 : 0;\n\n      // Format the number\n      return negative + firstComma(base, thousand, mod) + commas(base, thousand, mod) + decimals(number, decimal, usePrecision);\n    },\n\n\n    // Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61')\n    toFixed: function toFixed(value, precision) {\n      precision = exists(precision) ? precision : Humanize.normalizePrecision(precision, 0);\n      var power = Math.pow(10, precision);\n\n      // Multiply up by precision, round accurately, then divide and use native toFixed()\n      return (Math.round(value * power) / power).toFixed(precision);\n    },\n\n\n    // Ensures precision value is a positive integer\n    normalizePrecision: function normalizePrecision(value, base) {\n      value = Math.round(Math.abs(value));\n      return isNaN(value) ? base : value;\n    },\n\n\n    // Converts an integer to its ordinal as a string.\n    ordinal: function ordinal(value) {\n      var number = parseInt(value, 10);\n\n      if (number === 0) {\n        return value;\n      }\n\n      var specialCase = number % 100;\n      if ([11, 12, 13].indexOf(specialCase) >= 0) {\n        return number + 'th';\n      }\n\n      var leastSignificant = number % 10;\n\n      var end = void 0;\n      switch (leastSignificant) {\n        case 1:\n          end = 'st';\n          break;\n        case 2:\n          end = 'nd';\n          break;\n        case 3:\n          end = 'rd';\n          break;\n        default:\n          end = 'th';\n      }\n\n      return '' + number + end;\n    },\n\n\n    // Interprets numbers as occurences. Also accepts an optional array/map of overrides.\n    times: function times(value) {\n      var overrides = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (isFiniteNumber(value) && value >= 0) {\n        var number = parseFloat(value);\n        var smallTimes = ['never', 'once', 'twice'];\n        if (exists(overrides[number])) {\n          return String(overrides[number]);\n        }\n\n        var numberString = exists(smallTimes[number]) && smallTimes[number].toString();\n        return numberString || number.toString() + ' times';\n      }\n      return null;\n    },\n\n\n    // Returns the plural version of a given word if the value is not 1. The default suffix is 's'.\n    pluralize: function pluralize(number, singular, plural) {\n      if (!(exists(number) && exists(singular))) {\n        return null;\n      }\n\n      plural = exists(plural) ? plural : singular + 's';\n\n      return parseInt(number, 10) === 1 ? singular : plural;\n    },\n\n\n    // Truncates a string if it is longer than the specified number of characters (inclusive).\n    // Truncated strings will end with a translatable ellipsis sequence (\"…\").\n    truncate: function truncate(str) {\n      var length = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '...' : arguments[2];\n\n      if (str.length > length) {\n        return str.substring(0, length - ending.length) + ending;\n      }\n      return str;\n    },\n\n\n    // Truncates a string after a certain number of words.\n    truncateWords: function truncateWords(string, length) {\n      var array = string.split(' ');\n      var result = '';\n      var i = 0;\n\n      while (i < length) {\n        if (exists(array[i])) {\n          result += array[i] + ' ';\n        }\n        i++;\n      }\n\n      if (array.length > length) {\n        return result + '...';\n      }\n\n      return null;\n    },\n    truncatewords: function truncatewords() {\n      return Humanize.truncateWords.apply(Humanize, arguments);\n    },\n\n\n    // Truncates a number to an upper bound.\n    boundedNumber: function boundedNumber(num) {\n      var bound = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '+' : arguments[2];\n\n      var result = void 0;\n\n      if (isFiniteNumber(num) && isFiniteNumber(bound)) {\n        if (num > bound) {\n          result = bound + ending;\n        }\n      }\n\n      return (result || num).toString();\n    },\n    truncatenumber: function truncatenumber() {\n      return Humanize.boundedNumber.apply(Humanize, arguments);\n    },\n\n\n    // Converts a list of items to a human readable string with an optional limit.\n    oxford: function oxford(items, limit, limitStr) {\n      var numItems = items.length;\n\n      var limitIndex = void 0;\n      if (numItems < 2) {\n        return String(items);\n      } else if (numItems === 2) {\n        return items.join(' and ');\n      } else if (exists(limit) && numItems > limit) {\n        var extra = numItems - limit;\n        limitIndex = limit;\n        limitStr = exists(limitStr) ? limitStr : ', and ' + extra + ' ' + Humanize.pluralize(extra, 'other');\n      } else {\n        limitIndex = -1;\n        limitStr = ', and ' + items[numItems - 1];\n      }\n\n      return items.slice(0, limitIndex).join(', ') + limitStr;\n    },\n\n\n    // Converts an object to a definition-like string\n    dictionary: function dictionary(object) {\n      var joiner = arguments.length <= 1 || arguments[1] === undefined ? ' is ' : arguments[1];\n      var separator = arguments.length <= 2 || arguments[2] === undefined ? ', ' : arguments[2];\n\n      var result = '';\n\n      if (exists(object) && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && !isArray(object)) {\n        var defs = [];\n        for (var key in object) {\n          if (object.hasOwnProperty(key)) {\n            var val = object[key];\n            defs.push('' + key + joiner + val);\n          }\n        }\n\n        return defs.join(separator);\n      }\n\n      return result;\n    },\n\n\n    // Describes how many times an item appears in a list\n    frequency: function frequency(list, verb) {\n      if (!isArray(list)) {\n        return null;\n      }\n\n      var len = list.length;\n      var times = Humanize.times(len);\n\n      if (len === 0) {\n        return times + ' ' + verb;\n      }\n\n      return verb + ' ' + times;\n    },\n    pace: function pace(value, intervalMs) {\n      var unit = arguments.length <= 2 || arguments[2] === undefined ? 'time' : arguments[2];\n\n      if (value === 0 || intervalMs === 0) {\n        // Needs a better string than this...\n        return 'No ' + Humanize.pluralize(0, unit);\n      }\n\n      // Expose these as overridables?\n      var prefix = 'Approximately';\n      var timeUnit = void 0;\n      var relativePace = void 0;\n\n      var rate = value / intervalMs;\n      for (var i = 0; i < TIME_FORMATS.length; ++i) {\n        // assumes sorted list\n        var f = TIME_FORMATS[i];\n        relativePace = rate * f.value;\n        if (relativePace > 1) {\n          timeUnit = f.name;\n          break;\n        }\n      }\n\n      // Use the last time unit if there is nothing smaller\n      if (!timeUnit) {\n        prefix = 'Less than';\n        relativePace = 1;\n        timeUnit = TIME_FORMATS[TIME_FORMATS.length - 1].name;\n      }\n\n      var roundedPace = Math.round(relativePace);\n      unit = Humanize.pluralize(roundedPace, unit);\n\n      return prefix + ' ' + roundedPace + ' ' + unit + ' per ' + timeUnit;\n    },\n\n\n    // Converts newlines to <br/> tags\n    nl2br: function nl2br(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '<br/>' : arguments[1];\n\n      return string.replace(/\\n/g, replacement);\n    },\n\n\n    // Converts <br/> tags to newlines\n    br2nl: function br2nl(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '\\r\\n' : arguments[1];\n\n      return string.replace(/\\<br\\s*\\/?\\>/g, replacement);\n    },\n\n\n    // Capitalizes first letter in a string\n    capitalize: function capitalize(string) {\n      var downCaseTail = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      return '' + string.charAt(0).toUpperCase() + (downCaseTail ? string.slice(1).toLowerCase() : string.slice(1));\n    },\n\n\n    // Capitalizes the first letter of each word in a string\n    capitalizeAll: function capitalizeAll(string) {\n      return string.replace(/(?:^|\\s)\\S/g, function (a) {\n        return a.toUpperCase();\n      });\n    },\n\n\n    // Titlecase words in a string.\n    titleCase: function titleCase(string) {\n      var smallWords = /\\b(a|an|and|at|but|by|de|en|for|if|in|of|on|or|the|to|via|vs?\\.?)\\b/i;\n      var internalCaps = /\\S+[A-Z]+\\S*/;\n      var splitOnWhiteSpaceRegex = /\\s+/;\n      var splitOnHyphensRegex = /-/;\n\n      var _doTitleCase = void 0;\n      _doTitleCase = function doTitleCase(_string) {\n        var hyphenated = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n        var firstOrLast = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n\n        var titleCasedArray = [];\n        var stringArray = _string.split(hyphenated ? splitOnHyphensRegex : splitOnWhiteSpaceRegex);\n\n        for (var index = 0; index < stringArray.length; ++index) {\n          var word = stringArray[index];\n          if (word.indexOf('-') !== -1) {\n            titleCasedArray.push(_doTitleCase(word, true, index === 0 || index === stringArray.length - 1));\n            continue;\n          }\n\n          if (firstOrLast && (index === 0 || index === stringArray.length - 1)) {\n            titleCasedArray.push(internalCaps.test(word) ? word : Humanize.capitalize(word));\n            continue;\n          }\n\n          if (internalCaps.test(word)) {\n            titleCasedArray.push(word);\n          } else if (smallWords.test(word)) {\n            titleCasedArray.push(word.toLowerCase());\n          } else {\n            titleCasedArray.push(Humanize.capitalize(word));\n          }\n        }\n\n        return titleCasedArray.join(hyphenated ? '-' : ' ');\n      };\n\n      return _doTitleCase(string);\n    },\n    titlecase: function titlecase() {\n      return Humanize.titleCase.apply(Humanize, arguments);\n    }\n  };\n\n  return Humanize;\n});"],"mappings":"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"},"metadata":{},"sourceType":"script"}