{"ast":null,"code":"(function () {\n  var basenameMatch, computeMatch, isMatch, isWordStart, match, mergeMatches, scoreAcronyms, scoreCharacter, scoreConsecutives, _ref;\n\n  _ref = require('./scorer'), isMatch = _ref.isMatch, isWordStart = _ref.isWordStart, scoreConsecutives = _ref.scoreConsecutives, scoreCharacter = _ref.scoreCharacter, scoreAcronyms = _ref.scoreAcronyms;\n\n  exports.match = match = function (string, query, options) {\n    var allowErrors, baseMatches, matches, pathSeparator, preparedQuery, string_lw;\n    allowErrors = options.allowErrors, preparedQuery = options.preparedQuery, pathSeparator = options.pathSeparator;\n\n    if (!(allowErrors || isMatch(string, preparedQuery.core_lw, preparedQuery.core_up))) {\n      return [];\n    }\n\n    string_lw = string.toLowerCase();\n    matches = computeMatch(string, string_lw, preparedQuery);\n\n    if (matches.length === 0) {\n      return matches;\n    }\n\n    if (string.indexOf(pathSeparator) > -1) {\n      baseMatches = basenameMatch(string, string_lw, preparedQuery, pathSeparator);\n      matches = mergeMatches(matches, baseMatches);\n    }\n\n    return matches;\n  };\n\n  exports.wrap = function (string, query, options) {\n    var matchIndex, matchPos, matchPositions, output, strPos, tagClass, tagClose, tagOpen, _ref1;\n\n    if (options.wrap != null) {\n      _ref1 = options.wrap, tagClass = _ref1.tagClass, tagOpen = _ref1.tagOpen, tagClose = _ref1.tagClose;\n    }\n\n    if (tagClass == null) {\n      tagClass = 'highlight';\n    }\n\n    if (tagOpen == null) {\n      tagOpen = '<strong class=\"' + tagClass + '\">';\n    }\n\n    if (tagClose == null) {\n      tagClose = '</strong>';\n    }\n\n    if (string === query) {\n      return tagOpen + string + tagClose;\n    }\n\n    matchPositions = match(string, query, options);\n\n    if (matchPositions.length === 0) {\n      return string;\n    }\n\n    output = '';\n    matchIndex = -1;\n    strPos = 0;\n\n    while (++matchIndex < matchPositions.length) {\n      matchPos = matchPositions[matchIndex];\n\n      if (matchPos > strPos) {\n        output += string.substring(strPos, matchPos);\n        strPos = matchPos;\n      }\n\n      while (++matchIndex < matchPositions.length) {\n        if (matchPositions[matchIndex] === matchPos + 1) {\n          matchPos++;\n        } else {\n          matchIndex--;\n          break;\n        }\n      }\n\n      matchPos++;\n\n      if (matchPos > strPos) {\n        output += tagOpen;\n        output += string.substring(strPos, matchPos);\n        output += tagClose;\n        strPos = matchPos;\n      }\n    }\n\n    if (strPos <= string.length - 1) {\n      output += string.substring(strPos);\n    }\n\n    return output;\n  };\n\n  basenameMatch = function (subject, subject_lw, preparedQuery, pathSeparator) {\n    var basePos, depth, end;\n    end = subject.length - 1;\n\n    while (subject[end] === pathSeparator) {\n      end--;\n    }\n\n    basePos = subject.lastIndexOf(pathSeparator, end);\n\n    if (basePos === -1) {\n      return [];\n    }\n\n    depth = preparedQuery.depth;\n\n    while (depth-- > 0) {\n      basePos = subject.lastIndexOf(pathSeparator, basePos - 1);\n\n      if (basePos === -1) {\n        return [];\n      }\n    }\n\n    basePos++;\n    end++;\n    return computeMatch(subject.slice(basePos, end), subject_lw.slice(basePos, end), preparedQuery, basePos);\n  };\n\n  mergeMatches = function (a, b) {\n    var ai, bj, i, j, m, n, out;\n    m = a.length;\n    n = b.length;\n\n    if (n === 0) {\n      return a.slice();\n    }\n\n    if (m === 0) {\n      return b.slice();\n    }\n\n    i = -1;\n    j = 0;\n    bj = b[j];\n    out = [];\n\n    while (++i < m) {\n      ai = a[i];\n\n      while (bj <= ai && ++j < n) {\n        if (bj < ai) {\n          out.push(bj);\n        }\n\n        bj = b[j];\n      }\n\n      out.push(ai);\n    }\n\n    while (j < n) {\n      out.push(b[j++]);\n    }\n\n    return out;\n  };\n\n  computeMatch = function (subject, subject_lw, preparedQuery, offset) {\n    var DIAGONAL, LEFT, STOP, UP, acro_score, align, backtrack, csc_diag, csc_row, csc_score, i, j, m, matches, move, n, pos, query, query_lw, score, score_diag, score_row, score_up, si_lw, start, trace;\n\n    if (offset == null) {\n      offset = 0;\n    }\n\n    query = preparedQuery.query;\n    query_lw = preparedQuery.query_lw;\n    m = subject.length;\n    n = query.length;\n    acro_score = scoreAcronyms(subject, subject_lw, query, query_lw).score;\n    score_row = new Array(n);\n    csc_row = new Array(n);\n    STOP = 0;\n    UP = 1;\n    LEFT = 2;\n    DIAGONAL = 3;\n    trace = new Array(m * n);\n    pos = -1;\n    j = -1;\n\n    while (++j < n) {\n      score_row[j] = 0;\n      csc_row[j] = 0;\n    }\n\n    i = -1;\n\n    while (++i < m) {\n      score = 0;\n      score_up = 0;\n      csc_diag = 0;\n      si_lw = subject_lw[i];\n      j = -1;\n\n      while (++j < n) {\n        csc_score = 0;\n        align = 0;\n        score_diag = score_up;\n\n        if (query_lw[j] === si_lw) {\n          start = isWordStart(i, subject, subject_lw);\n          csc_score = csc_diag > 0 ? csc_diag : scoreConsecutives(subject, subject_lw, query, query_lw, i, j, start);\n          align = score_diag + scoreCharacter(i, j, start, acro_score, csc_score);\n        }\n\n        score_up = score_row[j];\n        csc_diag = csc_row[j];\n\n        if (score > score_up) {\n          move = LEFT;\n        } else {\n          score = score_up;\n          move = UP;\n        }\n\n        if (align > score) {\n          score = align;\n          move = DIAGONAL;\n        } else {\n          csc_score = 0;\n        }\n\n        score_row[j] = score;\n        csc_row[j] = csc_score;\n        trace[++pos] = score > 0 ? move : STOP;\n      }\n    }\n\n    i = m - 1;\n    j = n - 1;\n    pos = i * n + j;\n    backtrack = true;\n    matches = [];\n\n    while (backtrack && i >= 0 && j >= 0) {\n      switch (trace[pos]) {\n        case UP:\n          i--;\n          pos -= n;\n          break;\n\n        case LEFT:\n          j--;\n          pos--;\n          break;\n\n        case DIAGONAL:\n          matches.push(i + offset);\n          j--;\n          i--;\n          pos -= n + 1;\n          break;\n\n        default:\n          backtrack = false;\n      }\n    }\n\n    matches.reverse();\n    return matches;\n  };\n}).call(this);","map":{"version":3,"names":["basenameMatch","computeMatch","isMatch","isWordStart","match","mergeMatches","scoreAcronyms","scoreCharacter","scoreConsecutives","_ref","require","exports","string","query","options","allowErrors","baseMatches","matches","pathSeparator","preparedQuery","string_lw","core_lw","core_up","toLowerCase","length","indexOf","wrap","matchIndex","matchPos","matchPositions","output","strPos","tagClass","tagClose","tagOpen","_ref1","substring","subject","subject_lw","basePos","depth","end","lastIndexOf","slice","a","b","ai","bj","i","j","m","n","out","push","offset","DIAGONAL","LEFT","STOP","UP","acro_score","align","backtrack","csc_diag","csc_row","csc_score","move","pos","query_lw","score","score_diag","score_row","score_up","si_lw","start","trace","Array","reverse","call"],"sources":["C:/Users/anish/auth-final/node_modules/fuzzaldrin-plus/lib/matcher.js"],"sourcesContent":["(function() {\n  var basenameMatch, computeMatch, isMatch, isWordStart, match, mergeMatches, scoreAcronyms, scoreCharacter, scoreConsecutives, _ref;\n\n  _ref = require('./scorer'), isMatch = _ref.isMatch, isWordStart = _ref.isWordStart, scoreConsecutives = _ref.scoreConsecutives, scoreCharacter = _ref.scoreCharacter, scoreAcronyms = _ref.scoreAcronyms;\n\n  exports.match = match = function(string, query, options) {\n    var allowErrors, baseMatches, matches, pathSeparator, preparedQuery, string_lw;\n    allowErrors = options.allowErrors, preparedQuery = options.preparedQuery, pathSeparator = options.pathSeparator;\n    if (!(allowErrors || isMatch(string, preparedQuery.core_lw, preparedQuery.core_up))) {\n      return [];\n    }\n    string_lw = string.toLowerCase();\n    matches = computeMatch(string, string_lw, preparedQuery);\n    if (matches.length === 0) {\n      return matches;\n    }\n    if (string.indexOf(pathSeparator) > -1) {\n      baseMatches = basenameMatch(string, string_lw, preparedQuery, pathSeparator);\n      matches = mergeMatches(matches, baseMatches);\n    }\n    return matches;\n  };\n\n  exports.wrap = function(string, query, options) {\n    var matchIndex, matchPos, matchPositions, output, strPos, tagClass, tagClose, tagOpen, _ref1;\n    if ((options.wrap != null)) {\n      _ref1 = options.wrap, tagClass = _ref1.tagClass, tagOpen = _ref1.tagOpen, tagClose = _ref1.tagClose;\n    }\n    if (tagClass == null) {\n      tagClass = 'highlight';\n    }\n    if (tagOpen == null) {\n      tagOpen = '<strong class=\"' + tagClass + '\">';\n    }\n    if (tagClose == null) {\n      tagClose = '</strong>';\n    }\n    if (string === query) {\n      return tagOpen + string + tagClose;\n    }\n    matchPositions = match(string, query, options);\n    if (matchPositions.length === 0) {\n      return string;\n    }\n    output = '';\n    matchIndex = -1;\n    strPos = 0;\n    while (++matchIndex < matchPositions.length) {\n      matchPos = matchPositions[matchIndex];\n      if (matchPos > strPos) {\n        output += string.substring(strPos, matchPos);\n        strPos = matchPos;\n      }\n      while (++matchIndex < matchPositions.length) {\n        if (matchPositions[matchIndex] === matchPos + 1) {\n          matchPos++;\n        } else {\n          matchIndex--;\n          break;\n        }\n      }\n      matchPos++;\n      if (matchPos > strPos) {\n        output += tagOpen;\n        output += string.substring(strPos, matchPos);\n        output += tagClose;\n        strPos = matchPos;\n      }\n    }\n    if (strPos <= string.length - 1) {\n      output += string.substring(strPos);\n    }\n    return output;\n  };\n\n  basenameMatch = function(subject, subject_lw, preparedQuery, pathSeparator) {\n    var basePos, depth, end;\n    end = subject.length - 1;\n    while (subject[end] === pathSeparator) {\n      end--;\n    }\n    basePos = subject.lastIndexOf(pathSeparator, end);\n    if (basePos === -1) {\n      return [];\n    }\n    depth = preparedQuery.depth;\n    while (depth-- > 0) {\n      basePos = subject.lastIndexOf(pathSeparator, basePos - 1);\n      if (basePos === -1) {\n        return [];\n      }\n    }\n    basePos++;\n    end++;\n    return computeMatch(subject.slice(basePos, end), subject_lw.slice(basePos, end), preparedQuery, basePos);\n  };\n\n  mergeMatches = function(a, b) {\n    var ai, bj, i, j, m, n, out;\n    m = a.length;\n    n = b.length;\n    if (n === 0) {\n      return a.slice();\n    }\n    if (m === 0) {\n      return b.slice();\n    }\n    i = -1;\n    j = 0;\n    bj = b[j];\n    out = [];\n    while (++i < m) {\n      ai = a[i];\n      while (bj <= ai && ++j < n) {\n        if (bj < ai) {\n          out.push(bj);\n        }\n        bj = b[j];\n      }\n      out.push(ai);\n    }\n    while (j < n) {\n      out.push(b[j++]);\n    }\n    return out;\n  };\n\n  computeMatch = function(subject, subject_lw, preparedQuery, offset) {\n    var DIAGONAL, LEFT, STOP, UP, acro_score, align, backtrack, csc_diag, csc_row, csc_score, i, j, m, matches, move, n, pos, query, query_lw, score, score_diag, score_row, score_up, si_lw, start, trace;\n    if (offset == null) {\n      offset = 0;\n    }\n    query = preparedQuery.query;\n    query_lw = preparedQuery.query_lw;\n    m = subject.length;\n    n = query.length;\n    acro_score = scoreAcronyms(subject, subject_lw, query, query_lw).score;\n    score_row = new Array(n);\n    csc_row = new Array(n);\n    STOP = 0;\n    UP = 1;\n    LEFT = 2;\n    DIAGONAL = 3;\n    trace = new Array(m * n);\n    pos = -1;\n    j = -1;\n    while (++j < n) {\n      score_row[j] = 0;\n      csc_row[j] = 0;\n    }\n    i = -1;\n    while (++i < m) {\n      score = 0;\n      score_up = 0;\n      csc_diag = 0;\n      si_lw = subject_lw[i];\n      j = -1;\n      while (++j < n) {\n        csc_score = 0;\n        align = 0;\n        score_diag = score_up;\n        if (query_lw[j] === si_lw) {\n          start = isWordStart(i, subject, subject_lw);\n          csc_score = csc_diag > 0 ? csc_diag : scoreConsecutives(subject, subject_lw, query, query_lw, i, j, start);\n          align = score_diag + scoreCharacter(i, j, start, acro_score, csc_score);\n        }\n        score_up = score_row[j];\n        csc_diag = csc_row[j];\n        if (score > score_up) {\n          move = LEFT;\n        } else {\n          score = score_up;\n          move = UP;\n        }\n        if (align > score) {\n          score = align;\n          move = DIAGONAL;\n        } else {\n          csc_score = 0;\n        }\n        score_row[j] = score;\n        csc_row[j] = csc_score;\n        trace[++pos] = score > 0 ? move : STOP;\n      }\n    }\n    i = m - 1;\n    j = n - 1;\n    pos = i * n + j;\n    backtrack = true;\n    matches = [];\n    while (backtrack && i >= 0 && j >= 0) {\n      switch (trace[pos]) {\n        case UP:\n          i--;\n          pos -= n;\n          break;\n        case LEFT:\n          j--;\n          pos--;\n          break;\n        case DIAGONAL:\n          matches.push(i + offset);\n          j--;\n          i--;\n          pos -= n + 1;\n          break;\n        default:\n          backtrack = false;\n      }\n    }\n    matches.reverse();\n    return matches;\n  };\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}