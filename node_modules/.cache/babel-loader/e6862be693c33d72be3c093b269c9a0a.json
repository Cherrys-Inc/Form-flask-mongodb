{"ast":null,"code":"import { Position } from '../../constants';\n/**\n * Function to create a Rect.\n * @param {Object} dimensions\n * @param {Number} dimensions.width\n * @param {Number} dimensions.height\n * @param {Object} position\n * @param {Number} position.left\n * @param {Number} position.top\n * @return {Object} Rect { width, height, left, top, right, bottom }\n */\n\nvar makeRect = function makeRect(_ref, _ref2) {\n  var height = _ref.height,\n      width = _ref.width;\n  var left = _ref2.left,\n      top = _ref2.top;\n  var ceiledLeft = Math.ceil(left);\n  var ceiledTop = Math.ceil(top);\n  return {\n    width: width,\n    height: height,\n    left: ceiledLeft,\n    top: ceiledTop,\n    right: ceiledLeft + width,\n    bottom: ceiledTop + height\n  };\n};\n/**\n * Function to flip a position upside down.\n * @param {Position} position\n * @return {Position} flipped position\n */\n\n\nvar flipHorizontal = function flipHorizontal(position) {\n  switch (position) {\n    case Position.TOP_LEFT:\n      return Position.BOTTOM_LEFT;\n\n    case Position.TOP:\n    default:\n      return Position.BOTTOM;\n\n    case Position.TOP_RIGHT:\n      return Position.BOTTOM_RIGHT;\n\n    case Position.BOTTOM_LEFT:\n      return Position.TOP_LEFT;\n\n    case Position.BOTTOM:\n      return Position.TOP;\n\n    case Position.BOTTOM_RIGHT:\n      return Position.TOP_RIGHT;\n  }\n};\n/**\n * Function that returns if position is aligned on top.\n * @param {Position} position\n * @return {Boolean}\n */\n\n\nvar isAlignedOnTop = function isAlignedOnTop(position) {\n  switch (position) {\n    case Position.TOP_LEFT:\n    case Position.TOP:\n    case Position.TOP_RIGHT:\n      return true;\n\n    default:\n      return false;\n  }\n};\n/**\n * Function that returns if position is aligned left or right.\n * @param {Position} position\n * @return {Boolean}\n */\n\n\nvar isAlignedHorizontal = function isAlignedHorizontal(position) {\n  switch (position) {\n    case Position.LEFT:\n    case Position.RIGHT:\n      return true;\n\n    default:\n      return false;\n  }\n};\n/**\n * Function that returns if a rect fits on bottom.\n * @param {Rect} rect\n * @param {Object} viewport\n * @param {Number} viewportOffset\n * @return {Boolean}\n */\n\n\nvar getFitsOnBottom = function getFitsOnBottom(rect, viewport, viewportOffset) {\n  return rect.bottom < viewport.height - viewportOffset;\n};\n/**\n * Function that returns if a rect fits on top.\n * @param {Rect} rect\n * @param {Number} viewportOffset\n * @return {Boolean}\n */\n\n\nvar getFitsOnTop = function getFitsOnTop(rect, viewportOffset) {\n  return rect.top > viewportOffset;\n};\n/**\n * Function that returns if a rect fits on right.\n * @param {Rect} rect\n * @param {Object} viewport\n * @param {Number} viewportOffset\n * @return {Boolean}\n */\n\n\nvar getFitsOnRight = function getFitsOnRight(rect, viewport, viewportOffset) {\n  return rect.right < viewport.width - viewportOffset;\n};\n/**\n * Function that returns if a rect fits on left.\n * @param {Rect} rect\n * @param {Number} viewportOffset\n * @return {Boolean}\n */\n\n\nvar getFitsOnLeft = function getFitsOnLeft(rect, viewportOffset) {\n  return rect.left > viewportOffset;\n};\n/**\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\n * Function that returns the CSS `tranform-origin` property.\n * @param {Rect} rect\n * @param {Position} position\n * @param {Object} dimensions — the dimensions of the positioner.\n * @param {Number} targetCenter - center of the target.\n * @return {String} transform origin\n */\n\n\nvar getTransformOrigin = function getTransformOrigin(_ref3) {\n  var dimensions = _ref3.dimensions,\n      position = _ref3.position,\n      rect = _ref3.rect,\n      targetCenter = _ref3.targetCenter;\n  var centerY = Math.round(targetCenter - rect.top);\n\n  if (position === Position.LEFT) {\n    /* Syntax: x-offset | y-offset */\n    return \"\".concat(dimensions.width, \"px \").concat(centerY, \"px\");\n  }\n\n  if (position === Position.RIGHT) {\n    /* Syntax: x-offset | y-offset */\n    return \"0px \".concat(centerY, \"px\");\n  }\n\n  var centerX = Math.round(targetCenter - rect.left);\n\n  if (isAlignedOnTop(position)) {\n    /* Syntax: x-offset | y-offset */\n    return \"\".concat(centerX, \"px \").concat(dimensions.height, \"px \");\n  }\n  /* Syntax: x-offset | y-offset */\n\n\n  return \"\".concat(centerX, \"px 0px \");\n};\n/**\n * Function that takes in numbers and position and gives the final coords.\n * @param {Position} position — the position the positioner should be on.\n * @param {Object} dimensions — the dimensions of the positioner.\n * @param {Rect} targetRect — the rect of the target.\n * @param {Number} targetOffset - offset from the target.\n * @param {Object} viewport - the width and height of the viewport.\n * @param {Number} viewportOffset - offset from the viewport.\n * @return {Object} - { rect: Rect, position: Position, transformOrigin: string }\n */\n\n\nexport default function getFittedPosition(_ref4) {\n  var dimensions = _ref4.dimensions,\n      position = _ref4.position,\n      targetOffset = _ref4.targetOffset,\n      targetRect = _ref4.targetRect,\n      viewport = _ref4.viewport,\n      _ref4$viewportOffset = _ref4.viewportOffset,\n      viewportOffset = _ref4$viewportOffset === void 0 ? 8 : _ref4$viewportOffset;\n\n  var _getPosition = getPosition({\n    position: position,\n    dimensions: dimensions,\n    targetRect: targetRect,\n    targetOffset: targetOffset,\n    viewport: viewport,\n    viewportOffset: viewportOffset\n  }),\n      finalPosition = _getPosition.position,\n      rect = _getPosition.rect; // Push rect to the right if overflowing on the left side of the viewport.\n\n\n  if (rect.left < viewportOffset) {\n    rect.right += Math.ceil(Math.abs(rect.left - viewportOffset));\n    rect.left = Math.ceil(viewportOffset);\n  } // Push rect to the left if overflowing on the right side of the viewport.\n\n\n  if (rect.right > viewport.width - viewportOffset) {\n    var delta = Math.ceil(rect.right - (viewport.width - viewportOffset));\n    rect.left -= delta;\n    rect.right -= delta;\n  } // Push rect down if overflowing on the top side of the viewport.\n\n\n  if (rect.top < viewportOffset) {\n    rect.top += Math.ceil(Math.abs(rect.top - viewportOffset));\n    rect.bottom = Math.ceil(viewportOffset);\n  } // Push rect up if overflowing on the bottom side of the viewport.\n\n\n  if (rect.bottom > viewport.height - viewportOffset) {\n    var _delta = Math.ceil(rect.bottom - (viewport.height - viewportOffset));\n\n    rect.top -= _delta;\n    rect.bottom -= _delta;\n  }\n\n  var targetCenter = isAlignedHorizontal(position) ? targetRect.top + targetRect.height / 2 : targetRect.left + targetRect.width / 2;\n  var transformOrigin = getTransformOrigin({\n    rect: rect,\n    position: finalPosition,\n    dimensions: dimensions,\n    targetCenter: targetCenter\n  });\n  return {\n    rect: rect,\n    position: finalPosition,\n    transformOrigin: transformOrigin\n  };\n}\n/**\n * Function that takes in numbers and position and gives the final coords.\n * @param {Position} position — the position the positioner should be on.\n * @param {Object} dimensions — the dimensions of the positioner.\n * @param {Rect} targetRect — the rect of the target.\n * @param {Number} targetOffset - offset from the target.\n * @param {Object} viewport - the width and height of the viewport.\n * @param {Object} viewportOffset - offset from the viewport.\n * @return {Object} - { rect: Rect, position: Position }\n */\n\nfunction getPosition(_ref5) {\n  var dimensions = _ref5.dimensions,\n      position = _ref5.position,\n      targetOffset = _ref5.targetOffset,\n      targetRect = _ref5.targetRect,\n      viewport = _ref5.viewport,\n      _ref5$viewportOffset = _ref5.viewportOffset,\n      viewportOffset = _ref5$viewportOffset === void 0 ? 8 : _ref5$viewportOffset;\n  var isHorizontal = isAlignedHorizontal(position); // Handle left and right positions\n\n  if (isHorizontal) {\n    var leftRect = getRect({\n      position: Position.LEFT,\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n    var rightRect = getRect({\n      position: Position.RIGHT,\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n    var fitsOnLeft = getFitsOnLeft(leftRect, viewportOffset);\n    var fitsOnRight = getFitsOnRight(rightRect, viewport, viewportOffset);\n\n    if (position === Position.LEFT) {\n      if (fitsOnLeft) {\n        return {\n          position: position,\n          rect: leftRect\n        };\n      }\n\n      if (fitsOnRight) {\n        return {\n          position: Position.RIGHT,\n          rect: rightRect\n        };\n      }\n    }\n\n    if (position === Position.RIGHT) {\n      if (fitsOnRight) {\n        return {\n          position: position,\n          rect: rightRect\n        };\n      }\n\n      if (fitsOnLeft) {\n        return {\n          position: Position.LEFT,\n          rect: leftRect\n        };\n      }\n    } // Default to using the position with the most space\n\n\n    var spaceRight = Math.abs(viewport.width - viewportOffset - rightRect.right);\n    var spaceLeft = Math.abs(leftRect.left - viewportOffset);\n\n    if (spaceRight < spaceLeft) {\n      return {\n        position: Position.RIGHT,\n        rect: rightRect\n      };\n    }\n\n    return {\n      position: Position.LEFT,\n      rect: leftRect\n    };\n  }\n\n  var positionIsAlignedOnTop = isAlignedOnTop(position);\n  var topRect;\n  var bottomRect;\n\n  if (positionIsAlignedOnTop) {\n    topRect = getRect({\n      position: position,\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n    bottomRect = getRect({\n      position: flipHorizontal(position),\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n  } else {\n    topRect = getRect({\n      position: flipHorizontal(position),\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n    bottomRect = getRect({\n      position: position,\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n  }\n\n  var topRectFitsOnTop = getFitsOnTop(topRect, viewportOffset);\n  var bottomRectFitsOnBottom = getFitsOnBottom(bottomRect, viewport, viewportOffset);\n\n  if (positionIsAlignedOnTop) {\n    if (topRectFitsOnTop) {\n      return {\n        position: position,\n        rect: topRect\n      };\n    }\n\n    if (bottomRectFitsOnBottom) {\n      return {\n        position: flipHorizontal(position),\n        rect: bottomRect\n      };\n    }\n  }\n\n  if (!positionIsAlignedOnTop) {\n    if (bottomRectFitsOnBottom) {\n      return {\n        position: position,\n        rect: bottomRect\n      };\n    }\n\n    if (topRectFitsOnTop) {\n      return {\n        position: flipHorizontal(position),\n        rect: topRect\n      };\n    }\n  } // Default to most spacious if there is no fit.\n\n\n  var spaceBottom = Math.abs(viewport.height - viewportOffset - bottomRect.bottom);\n  var spaceTop = Math.abs(topRect.top - viewportOffset);\n\n  if (spaceBottom < spaceTop) {\n    return {\n      position: positionIsAlignedOnTop ? flipHorizontal(position) : position,\n      rect: bottomRect\n    };\n  }\n\n  return {\n    position: positionIsAlignedOnTop ? position : flipHorizontal(position),\n    rect: topRect\n  };\n}\n/**\n * Function that takes in numbers and position and gives the final coords.\n * @param {Position} position\n * @param {Number} targetOffset - offset from the target.\n * @param {Object} dimensions — the dimensions of the positioner.\n * @param {Rect} targetRect — the rect of the target.\n * @return {Rect} - Rect { width, height, left, top, right, bottom }\n */\n\n\nfunction getRect(_ref6) {\n  var dimensions = _ref6.dimensions,\n      position = _ref6.position,\n      targetOffset = _ref6.targetOffset,\n      targetRect = _ref6.targetRect;\n  var leftRect = targetRect.left + targetRect.width / 2 - dimensions.width / 2;\n  var alignedTopY = targetRect.top - dimensions.height - targetOffset;\n  var alignedBottomY = targetRect.bottom + targetOffset;\n  var alignedRightX = targetRect.right - dimensions.width;\n  var alignedLeftRightY = targetRect.top + targetRect.height / 2 - dimensions.height / 2;\n\n  switch (position) {\n    case Position.LEFT:\n      return makeRect(dimensions, {\n        left: targetRect.left - dimensions.width - targetOffset,\n        top: alignedLeftRightY\n      });\n\n    case Position.RIGHT:\n      return makeRect(dimensions, {\n        left: targetRect.right + targetOffset,\n        top: alignedLeftRightY\n      });\n\n    case Position.TOP:\n      return makeRect(dimensions, {\n        left: leftRect,\n        top: alignedTopY\n      });\n\n    case Position.TOP_LEFT:\n      return makeRect(dimensions, {\n        left: targetRect.left,\n        top: alignedTopY\n      });\n\n    case Position.TOP_RIGHT:\n      return makeRect(dimensions, {\n        left: alignedRightX,\n        top: alignedTopY\n      });\n\n    default:\n    case Position.BOTTOM:\n      return makeRect(dimensions, {\n        left: leftRect,\n        top: alignedBottomY\n      });\n\n    case Position.BOTTOM_LEFT:\n      return makeRect(dimensions, {\n        left: targetRect.left,\n        top: alignedBottomY\n      });\n\n    case Position.BOTTOM_RIGHT:\n      return makeRect(dimensions, {\n        left: alignedRightX,\n        top: alignedBottomY\n      });\n  }\n}","map":{"version":3,"names":["Position","makeRect","_ref","_ref2","height","width","left","top","ceiledLeft","Math","ceil","ceiledTop","right","bottom","flipHorizontal","position","TOP_LEFT","BOTTOM_LEFT","TOP","BOTTOM","TOP_RIGHT","BOTTOM_RIGHT","isAlignedOnTop","isAlignedHorizontal","LEFT","RIGHT","getFitsOnBottom","rect","viewport","viewportOffset","getFitsOnTop","getFitsOnRight","getFitsOnLeft","getTransformOrigin","_ref3","dimensions","targetCenter","centerY","round","concat","centerX","getFittedPosition","_ref4","targetOffset","targetRect","_ref4$viewportOffset","_getPosition","getPosition","finalPosition","abs","delta","_delta","transformOrigin","_ref5","_ref5$viewportOffset","isHorizontal","leftRect","getRect","rightRect","fitsOnLeft","fitsOnRight","spaceRight","spaceLeft","positionIsAlignedOnTop","topRect","bottomRect","topRectFitsOnTop","bottomRectFitsOnBottom","spaceBottom","spaceTop","_ref6","alignedTopY","alignedBottomY","alignedRightX","alignedLeftRightY"],"sources":["C:/Users/anish/auth-final/node_modules/evergreen-ui/esm/positioner/src/getPosition.js"],"sourcesContent":["import { Position } from '../../constants';\n/**\n * Function to create a Rect.\n * @param {Object} dimensions\n * @param {Number} dimensions.width\n * @param {Number} dimensions.height\n * @param {Object} position\n * @param {Number} position.left\n * @param {Number} position.top\n * @return {Object} Rect { width, height, left, top, right, bottom }\n */\n\nvar makeRect = function makeRect(_ref, _ref2) {\n  var height = _ref.height,\n      width = _ref.width;\n  var left = _ref2.left,\n      top = _ref2.top;\n  var ceiledLeft = Math.ceil(left);\n  var ceiledTop = Math.ceil(top);\n  return {\n    width: width,\n    height: height,\n    left: ceiledLeft,\n    top: ceiledTop,\n    right: ceiledLeft + width,\n    bottom: ceiledTop + height\n  };\n};\n/**\n * Function to flip a position upside down.\n * @param {Position} position\n * @return {Position} flipped position\n */\n\n\nvar flipHorizontal = function flipHorizontal(position) {\n  switch (position) {\n    case Position.TOP_LEFT:\n      return Position.BOTTOM_LEFT;\n\n    case Position.TOP:\n    default:\n      return Position.BOTTOM;\n\n    case Position.TOP_RIGHT:\n      return Position.BOTTOM_RIGHT;\n\n    case Position.BOTTOM_LEFT:\n      return Position.TOP_LEFT;\n\n    case Position.BOTTOM:\n      return Position.TOP;\n\n    case Position.BOTTOM_RIGHT:\n      return Position.TOP_RIGHT;\n  }\n};\n/**\n * Function that returns if position is aligned on top.\n * @param {Position} position\n * @return {Boolean}\n */\n\n\nvar isAlignedOnTop = function isAlignedOnTop(position) {\n  switch (position) {\n    case Position.TOP_LEFT:\n    case Position.TOP:\n    case Position.TOP_RIGHT:\n      return true;\n\n    default:\n      return false;\n  }\n};\n/**\n * Function that returns if position is aligned left or right.\n * @param {Position} position\n * @return {Boolean}\n */\n\n\nvar isAlignedHorizontal = function isAlignedHorizontal(position) {\n  switch (position) {\n    case Position.LEFT:\n    case Position.RIGHT:\n      return true;\n\n    default:\n      return false;\n  }\n};\n/**\n * Function that returns if a rect fits on bottom.\n * @param {Rect} rect\n * @param {Object} viewport\n * @param {Number} viewportOffset\n * @return {Boolean}\n */\n\n\nvar getFitsOnBottom = function getFitsOnBottom(rect, viewport, viewportOffset) {\n  return rect.bottom < viewport.height - viewportOffset;\n};\n/**\n * Function that returns if a rect fits on top.\n * @param {Rect} rect\n * @param {Number} viewportOffset\n * @return {Boolean}\n */\n\n\nvar getFitsOnTop = function getFitsOnTop(rect, viewportOffset) {\n  return rect.top > viewportOffset;\n};\n/**\n * Function that returns if a rect fits on right.\n * @param {Rect} rect\n * @param {Object} viewport\n * @param {Number} viewportOffset\n * @return {Boolean}\n */\n\n\nvar getFitsOnRight = function getFitsOnRight(rect, viewport, viewportOffset) {\n  return rect.right < viewport.width - viewportOffset;\n};\n/**\n * Function that returns if a rect fits on left.\n * @param {Rect} rect\n * @param {Number} viewportOffset\n * @return {Boolean}\n */\n\n\nvar getFitsOnLeft = function getFitsOnLeft(rect, viewportOffset) {\n  return rect.left > viewportOffset;\n};\n/**\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\n * Function that returns the CSS `tranform-origin` property.\n * @param {Rect} rect\n * @param {Position} position\n * @param {Object} dimensions — the dimensions of the positioner.\n * @param {Number} targetCenter - center of the target.\n * @return {String} transform origin\n */\n\n\nvar getTransformOrigin = function getTransformOrigin(_ref3) {\n  var dimensions = _ref3.dimensions,\n      position = _ref3.position,\n      rect = _ref3.rect,\n      targetCenter = _ref3.targetCenter;\n  var centerY = Math.round(targetCenter - rect.top);\n\n  if (position === Position.LEFT) {\n    /* Syntax: x-offset | y-offset */\n    return \"\".concat(dimensions.width, \"px \").concat(centerY, \"px\");\n  }\n\n  if (position === Position.RIGHT) {\n    /* Syntax: x-offset | y-offset */\n    return \"0px \".concat(centerY, \"px\");\n  }\n\n  var centerX = Math.round(targetCenter - rect.left);\n\n  if (isAlignedOnTop(position)) {\n    /* Syntax: x-offset | y-offset */\n    return \"\".concat(centerX, \"px \").concat(dimensions.height, \"px \");\n  }\n  /* Syntax: x-offset | y-offset */\n\n\n  return \"\".concat(centerX, \"px 0px \");\n};\n/**\n * Function that takes in numbers and position and gives the final coords.\n * @param {Position} position — the position the positioner should be on.\n * @param {Object} dimensions — the dimensions of the positioner.\n * @param {Rect} targetRect — the rect of the target.\n * @param {Number} targetOffset - offset from the target.\n * @param {Object} viewport - the width and height of the viewport.\n * @param {Number} viewportOffset - offset from the viewport.\n * @return {Object} - { rect: Rect, position: Position, transformOrigin: string }\n */\n\n\nexport default function getFittedPosition(_ref4) {\n  var dimensions = _ref4.dimensions,\n      position = _ref4.position,\n      targetOffset = _ref4.targetOffset,\n      targetRect = _ref4.targetRect,\n      viewport = _ref4.viewport,\n      _ref4$viewportOffset = _ref4.viewportOffset,\n      viewportOffset = _ref4$viewportOffset === void 0 ? 8 : _ref4$viewportOffset;\n\n  var _getPosition = getPosition({\n    position: position,\n    dimensions: dimensions,\n    targetRect: targetRect,\n    targetOffset: targetOffset,\n    viewport: viewport,\n    viewportOffset: viewportOffset\n  }),\n      finalPosition = _getPosition.position,\n      rect = _getPosition.rect; // Push rect to the right if overflowing on the left side of the viewport.\n\n\n  if (rect.left < viewportOffset) {\n    rect.right += Math.ceil(Math.abs(rect.left - viewportOffset));\n    rect.left = Math.ceil(viewportOffset);\n  } // Push rect to the left if overflowing on the right side of the viewport.\n\n\n  if (rect.right > viewport.width - viewportOffset) {\n    var delta = Math.ceil(rect.right - (viewport.width - viewportOffset));\n    rect.left -= delta;\n    rect.right -= delta;\n  } // Push rect down if overflowing on the top side of the viewport.\n\n\n  if (rect.top < viewportOffset) {\n    rect.top += Math.ceil(Math.abs(rect.top - viewportOffset));\n    rect.bottom = Math.ceil(viewportOffset);\n  } // Push rect up if overflowing on the bottom side of the viewport.\n\n\n  if (rect.bottom > viewport.height - viewportOffset) {\n    var _delta = Math.ceil(rect.bottom - (viewport.height - viewportOffset));\n\n    rect.top -= _delta;\n    rect.bottom -= _delta;\n  }\n\n  var targetCenter = isAlignedHorizontal(position) ? targetRect.top + targetRect.height / 2 : targetRect.left + targetRect.width / 2;\n  var transformOrigin = getTransformOrigin({\n    rect: rect,\n    position: finalPosition,\n    dimensions: dimensions,\n    targetCenter: targetCenter\n  });\n  return {\n    rect: rect,\n    position: finalPosition,\n    transformOrigin: transformOrigin\n  };\n}\n/**\n * Function that takes in numbers and position and gives the final coords.\n * @param {Position} position — the position the positioner should be on.\n * @param {Object} dimensions — the dimensions of the positioner.\n * @param {Rect} targetRect — the rect of the target.\n * @param {Number} targetOffset - offset from the target.\n * @param {Object} viewport - the width and height of the viewport.\n * @param {Object} viewportOffset - offset from the viewport.\n * @return {Object} - { rect: Rect, position: Position }\n */\n\nfunction getPosition(_ref5) {\n  var dimensions = _ref5.dimensions,\n      position = _ref5.position,\n      targetOffset = _ref5.targetOffset,\n      targetRect = _ref5.targetRect,\n      viewport = _ref5.viewport,\n      _ref5$viewportOffset = _ref5.viewportOffset,\n      viewportOffset = _ref5$viewportOffset === void 0 ? 8 : _ref5$viewportOffset;\n  var isHorizontal = isAlignedHorizontal(position); // Handle left and right positions\n\n  if (isHorizontal) {\n    var leftRect = getRect({\n      position: Position.LEFT,\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n    var rightRect = getRect({\n      position: Position.RIGHT,\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n    var fitsOnLeft = getFitsOnLeft(leftRect, viewportOffset);\n    var fitsOnRight = getFitsOnRight(rightRect, viewport, viewportOffset);\n\n    if (position === Position.LEFT) {\n      if (fitsOnLeft) {\n        return {\n          position: position,\n          rect: leftRect\n        };\n      }\n\n      if (fitsOnRight) {\n        return {\n          position: Position.RIGHT,\n          rect: rightRect\n        };\n      }\n    }\n\n    if (position === Position.RIGHT) {\n      if (fitsOnRight) {\n        return {\n          position: position,\n          rect: rightRect\n        };\n      }\n\n      if (fitsOnLeft) {\n        return {\n          position: Position.LEFT,\n          rect: leftRect\n        };\n      }\n    } // Default to using the position with the most space\n\n\n    var spaceRight = Math.abs(viewport.width - viewportOffset - rightRect.right);\n    var spaceLeft = Math.abs(leftRect.left - viewportOffset);\n\n    if (spaceRight < spaceLeft) {\n      return {\n        position: Position.RIGHT,\n        rect: rightRect\n      };\n    }\n\n    return {\n      position: Position.LEFT,\n      rect: leftRect\n    };\n  }\n\n  var positionIsAlignedOnTop = isAlignedOnTop(position);\n  var topRect;\n  var bottomRect;\n\n  if (positionIsAlignedOnTop) {\n    topRect = getRect({\n      position: position,\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n    bottomRect = getRect({\n      position: flipHorizontal(position),\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n  } else {\n    topRect = getRect({\n      position: flipHorizontal(position),\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n    bottomRect = getRect({\n      position: position,\n      dimensions: dimensions,\n      targetRect: targetRect,\n      targetOffset: targetOffset\n    });\n  }\n\n  var topRectFitsOnTop = getFitsOnTop(topRect, viewportOffset);\n  var bottomRectFitsOnBottom = getFitsOnBottom(bottomRect, viewport, viewportOffset);\n\n  if (positionIsAlignedOnTop) {\n    if (topRectFitsOnTop) {\n      return {\n        position: position,\n        rect: topRect\n      };\n    }\n\n    if (bottomRectFitsOnBottom) {\n      return {\n        position: flipHorizontal(position),\n        rect: bottomRect\n      };\n    }\n  }\n\n  if (!positionIsAlignedOnTop) {\n    if (bottomRectFitsOnBottom) {\n      return {\n        position: position,\n        rect: bottomRect\n      };\n    }\n\n    if (topRectFitsOnTop) {\n      return {\n        position: flipHorizontal(position),\n        rect: topRect\n      };\n    }\n  } // Default to most spacious if there is no fit.\n\n\n  var spaceBottom = Math.abs(viewport.height - viewportOffset - bottomRect.bottom);\n  var spaceTop = Math.abs(topRect.top - viewportOffset);\n\n  if (spaceBottom < spaceTop) {\n    return {\n      position: positionIsAlignedOnTop ? flipHorizontal(position) : position,\n      rect: bottomRect\n    };\n  }\n\n  return {\n    position: positionIsAlignedOnTop ? position : flipHorizontal(position),\n    rect: topRect\n  };\n}\n/**\n * Function that takes in numbers and position and gives the final coords.\n * @param {Position} position\n * @param {Number} targetOffset - offset from the target.\n * @param {Object} dimensions — the dimensions of the positioner.\n * @param {Rect} targetRect — the rect of the target.\n * @return {Rect} - Rect { width, height, left, top, right, bottom }\n */\n\n\nfunction getRect(_ref6) {\n  var dimensions = _ref6.dimensions,\n      position = _ref6.position,\n      targetOffset = _ref6.targetOffset,\n      targetRect = _ref6.targetRect;\n  var leftRect = targetRect.left + targetRect.width / 2 - dimensions.width / 2;\n  var alignedTopY = targetRect.top - dimensions.height - targetOffset;\n  var alignedBottomY = targetRect.bottom + targetOffset;\n  var alignedRightX = targetRect.right - dimensions.width;\n  var alignedLeftRightY = targetRect.top + targetRect.height / 2 - dimensions.height / 2;\n\n  switch (position) {\n    case Position.LEFT:\n      return makeRect(dimensions, {\n        left: targetRect.left - dimensions.width - targetOffset,\n        top: alignedLeftRightY\n      });\n\n    case Position.RIGHT:\n      return makeRect(dimensions, {\n        left: targetRect.right + targetOffset,\n        top: alignedLeftRightY\n      });\n\n    case Position.TOP:\n      return makeRect(dimensions, {\n        left: leftRect,\n        top: alignedTopY\n      });\n\n    case Position.TOP_LEFT:\n      return makeRect(dimensions, {\n        left: targetRect.left,\n        top: alignedTopY\n      });\n\n    case Position.TOP_RIGHT:\n      return makeRect(dimensions, {\n        left: alignedRightX,\n        top: alignedTopY\n      });\n\n    default:\n    case Position.BOTTOM:\n      return makeRect(dimensions, {\n        left: leftRect,\n        top: alignedBottomY\n      });\n\n    case Position.BOTTOM_LEFT:\n      return makeRect(dimensions, {\n        left: targetRect.left,\n        top: alignedBottomY\n      });\n\n    case Position.BOTTOM_RIGHT:\n      return makeRect(dimensions, {\n        left: alignedRightX,\n        top: alignedBottomY\n      });\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}